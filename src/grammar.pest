Program = _{ SOI  ~ Function+? ~ EOI}
Function = {"fn" ~ Name ~ "("~ arg*~")" ~"{" ~ (Variable | Expr | FunctionCall| CrementBinary)*?  ~ Return? ~ "}" }
FunctionCall = {Name ~ "(" ~ param* ~ ");"  }
arg = {Name ~ ":" ~ Type}
Type = @{ASCII_ALPHA+}
param = @{ASCII_ALPHA+}
Variable = {"let" ~ Name ~ "=" ~ (Binary | Int | FunctionCall | Name) ~ ";"}
Return = @{Name | Term | Expr}
Expr = {Binary| Unary  | Term }
Name = @{ASCII_ALPHA+}
Term = _{Int | "(" ~ Expr ~ ")" }
Unary = { UnaryOperator ~ Term }
CrementBinary = { Name ~ CrementOperator ~ ";"}
Binary = {  Term ~ (Operator ~ Term)*  }
Operator = { UnaryOperator | "*" | "/" }
UnaryOperator = _{ "+" | "-" }
CrementOperator = {"++" | "--"}
Int = @{ Operator? ~ ASCII_DIGIT+ }
WHITESPACE = _{ " " | "\t" }
EOF = _{ EOI | ";" }